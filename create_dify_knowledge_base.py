#!/usr/bin/env python3
"""
Script para criar base de conhecimento t√©cnico para Dify
Extrai resolu√ß√µes de Alison e Jo√£o para treinar Isabella
"""

import sqlite3
import json
import re
from collections import defaultdict

class DifyKnowledgeBaseCreator:
    def __init__(self, db_path: str = 'talqui.db'):
        self.db_path = db_path
        self.knowledge_base = []
        
    def clean_message(self, message: str) -> str:
        """Limpa mensagem removendo assinaturas e formata√ß√µes"""
        if not message:
            return ""
        
        # Remover assinaturas
        message = re.sub(r'\*[^*]+\*:', '', message)
        message = re.sub(r'\*[^*]+\*', '', message)
        
        # Remover quebras de linha excessivas
        message = re.sub(r'\n+', ' ', message)
        
        # Remover espa√ßos extras
        message = re.sub(r'\s+', ' ', message)
        
        return message.strip()
    
    def chunk_text(self, text: str, max_chars: int = 900) -> list:
        """Divide texto em chunks adequados para Dify"""
        if len(text) <= max_chars:
            return [text]
        
        chunks = []
        sentences = text.split('. ')
        current_chunk = ""
        
        for sentence in sentences:
            if len(current_chunk + sentence) <= max_chars:
                current_chunk += sentence + ". "
            else:
                if current_chunk:
                    chunks.append(current_chunk.strip())
                current_chunk = sentence + ". "
        
        if current_chunk:
            chunks.append(current_chunk.strip())
        
        return chunks
    
    def extract_problem_and_solution(self, session_id: str, subcategory: str, agent: str):
        """Extrai problema e solu√ß√£o de uma sess√£o"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Buscar mensagens da sess√£o
        cursor.execute("""
            SELECT messageDirection, messageValue, message_createdAt
            FROM talqui_unified 
            WHERE sessionID = ? AND messageValue IS NOT NULL
            ORDER BY message_createdAt ASC
        """, (session_id,))
        
        messages = cursor.fetchall()
        
        inbound_msgs = []
        outbound_msgs = []
        
        for direction, content, timestamp in messages:
            clean_content = self.clean_message(content)
            if len(clean_content) > 20:  # Filtrar mensagens muito curtas
                if direction == 'inbound':
                    inbound_msgs.append(clean_content)
                else:
                    outbound_msgs.append(clean_content)
        
        conn.close()
        
        # Combinar mensagens para formar problema e solu√ß√£o
        problem = " ".join(inbound_msgs[:3])  # Primeiras 3 mensagens do cliente
        solution = " ".join(outbound_msgs[:5])  # Primeiras 5 respostas do agente
        
        return {
            'subcategory': subcategory,
            'agent': agent,
            'problem': problem,
            'solution': solution
        }
    
    def create_qa_pairs(self):
        """Cria pares de pergunta e resposta por subcategoria"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Buscar sess√µes resolvidas por Alison e Jo√£o
        cursor.execute("""
            SELECT sessionID, subcategory, primary_agent, summary
            FROM session_classifications 
            WHERE primary_agent IN ('Alison', 'Jo√£o') 
            AND has_handoff = 0 
            AND category = 'SUPORTE_TECNICO'
            AND subcategory != 'outros'
            ORDER BY subcategory, sessionID
        """)
        
        sessions = cursor.fetchall()
        
        qa_by_category = defaultdict(list)
        
        for session_id, subcategory, agent, summary in sessions:
            data = self.extract_problem_and_solution(session_id, subcategory, agent)
            
            if data['problem'] and data['solution']:
                qa_by_category[subcategory].append(data)
        
        conn.close()
        return qa_by_category
    
    def generate_dify_chunks(self, qa_data):
        """Gera chunks formatados para Dify"""
        
        # Templates por categoria
        templates = {
            'problemas de integra√ß√£o': {
                'questions': [
                    "Como resolver problemas de conex√£o do WhatsApp Business?",
                    "O que fazer quando o QR Code n√£o conecta?",
                    "Como reconectar o WhatsApp na plataforma?",
                    "Problemas de integra√ß√£o com WhatsApp, como resolver?",
                    "WhatsApp Business n√£o conecta, qual a solu√ß√£o?"
                ],
                'context': "Problemas de integra√ß√£o e conex√£o com WhatsApp Business"
            },
            'problemas de configura√ß√£o': {
                'questions': [
                    "Como configurar o tempo de inatividade da sess√£o?",
                    "Como alterar configura√ß√µes visuais da interface?",
                    "Como configurar promessa de pagamento via chat?",
                    "Problemas de configura√ß√£o no sistema, como resolver?",
                    "Como fazer configura√ß√µes avan√ßadas na plataforma?"
                ],
                'context': "Configura√ß√µes e personaliza√ß√µes do sistema"
            },
            'problemas de mensagens/whatsapp': {
                'questions': [
                    "Mensagens duplicadas no WhatsApp, como resolver?",
                    "Problemas de entrega de mensagens, qual a solu√ß√£o?",
                    "Como resolver problemas com imagens no WhatsApp?",
                    "Mensagens de localiza√ß√£o n√£o funcionam, como corrigir?",
                    "Disparo de faturas com erro, como resolver?"
                ],
                'context': "Problemas espec√≠ficos com mensagens no WhatsApp"
            },
            'problemas de funcionamento/sistema': {
                'questions': [
                    "Sistema com problemas de formata√ß√£o de texto?",
                    "Como resolver problemas de funcionamento do chatbot?",
                    "Verifica√ß√£o de funcionamento da localiza√ß√£o?",
                    "Sistema apresentando erros, como diagnosticar?",
                    "Problemas gerais de funcionamento, como resolver?"
                ],
                'context': "Problemas gerais de funcionamento do sistema"
            },
            'problemas de acesso/login': {
                'questions': [
                    "N√£o consigo acessar a plataforma, como resolver?",
                    "Problemas com login no Meta Business?",
                    "Como configurar conta do Facebook para acesso?",
                    "Erro de acesso ap√≥s configura√ß√£o, o que fazer?",
                    "Problemas de autentica√ß√£o, como resolver?"
                ],
                'context': "Problemas de acesso e autentica√ß√£o"
            },
            'problemas com chatbot/automa√ß√£o': {
                'questions': [
                    "Chatbot ficou offline, como reativar?",
                    "Como otimizar fluxo de atendimento autom√°tico?",
                    "Problemas t√©cnicos com chatbot, como resolver?",
                    "Conectividade do chatbot com problema, o que fazer?",
                    "Automa√ß√£o n√£o funciona, como corrigir?"
                ],
                'context': "Problemas com chatbot e automa√ß√£o"
            }
        }
        
        chunks = []
        
        for subcategory, data_list in qa_data.items():
            if subcategory not in templates:
                continue
                
            template = templates[subcategory]
            
            # Extrair solu√ß√µes reais dos especialistas
            solutions = []
            for data in data_list[:3]:  # Top 3 solu√ß√µes
                if data['solution'] and len(data['solution']) > 50:
                    solutions.append(data['solution'][:800])  # Limitar tamanho
            
            # Criar m√∫ltiplos chunks por categoria
            for i, question in enumerate(template['questions']):
                solution_text = solutions[i % len(solutions)] if solutions else "Encaminhar para suporte t√©cnico especializado."
                
                # Criar chunk com pergunta e resposta
                chunk_content = f"""PERGUNTA: {question}

CONTEXTO: {template['context']}

RESOLU√á√ÉO:
{solution_text}

ESPECIALISTA: Baseado nas resolu√ß√µes de {', '.join(set([d['agent'] for d in data_list]))}"""
                
                # Dividir em chunks se necess√°rio
                chunk_parts = self.chunk_text(chunk_content, 950)
                
                for j, chunk_part in enumerate(chunk_parts):
                    chunks.append({
                        'id': f"{subcategory.replace(' ', '_')}_{i+1}_{j+1}",
                        'category': subcategory,
                        'question': question,
                        'content': chunk_part,
                        'tokens': len(chunk_part.split()),
                        'chars': len(chunk_part)
                    })
        
        return chunks
    
    def create_knowledge_base(self):
        """Cria a base de conhecimento completa"""
        print("üîç Extraindo resolu√ß√µes t√©cnicas dos especialistas...")
        qa_data = self.create_qa_pairs()
        
        print("üìù Gerando chunks para Dify...")
        chunks = self.generate_dify_chunks(qa_data)
        
        print(f"‚úÖ {len(chunks)} chunks criados")
        
        # Estat√≠sticas
        total_chars = sum(chunk['chars'] for chunk in chunks)
        total_tokens = sum(chunk['tokens'] for chunk in chunks)
        
        print(f"üìä Total: {total_chars:,} caracteres, ~{total_tokens:,} tokens")
        
        return {
            'metadata': {
                'created_at': '2025-09-06',
                'purpose': 'Base de conhecimento t√©cnico para treinamento de Isabella',
                'source': 'Resolu√ß√µes dos especialistas Alison e Jo√£o',
                'total_chunks': len(chunks),
                'total_chars': total_chars,
                'total_tokens': total_tokens
            },
            'chunks': chunks
        }
    
    def export_to_dify_format(self, filename='DIFY_TECHNICAL_KNOWLEDGE_BASE.json'):
        """Exporta no formato adequado para Dify"""
        knowledge_base = self.create_knowledge_base()
        
        # Formato espec√≠fico para Dify
        dify_format = {
            'version': '1.0',
            'type': 'technical_support',
            'language': 'pt-BR',
            'chunks': []
        }
        
        for chunk in knowledge_base['chunks']:
            dify_format['chunks'].append({
                'content': chunk['content'],
                'metadata': {
                    'category': chunk['category'],
                    'question': chunk['question'],
                    'id': chunk['id']
                }
            })
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(dify_format, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ Base de conhecimento salva: {filename}")
        
        # Criar tamb√©m vers√£o markdown para visualiza√ß√£o
        md_filename = filename.replace('.json', '.md')
        with open(md_filename, 'w', encoding='utf-8') as f:
            f.write("# Base de Conhecimento T√©cnico para Isabella\n\n")
            f.write("## Resolu√ß√µes baseadas na expertise de Alison e Jo√£o\n\n")
            
            current_category = None
            for chunk in knowledge_base['chunks']:
                if chunk['category'] != current_category:
                    current_category = chunk['category']
                    f.write(f"\n## üîß {current_category.title()}\n\n")
                
                f.write(f"### {chunk['question']}\n\n")
                f.write(f"{chunk['content']}\n\n")
                f.write("---\n\n")
        
        print(f"üìÑ Vers√£o markdown salva: {md_filename}")
        
        return filename, knowledge_base['metadata']

def main():
    creator = DifyKnowledgeBaseCreator()
    filename, metadata = creator.export_to_dify_format()
    
    print("\n‚úÖ BASE DE CONHECIMENTO CRIADA PARA DIFY!")
    print(f"üìÑ Arquivo: {filename}")
    print(f"üìä Chunks: {metadata['total_chunks']}")
    print(f"üìù Caracteres: {metadata['total_chars']:,}")
    print(f"üéØ Tokens estimados: {metadata['total_tokens']:,}")

if __name__ == "__main__":
    main()