#!/usr/bin/env python3
"""
Script para extrair informa√ß√µes de clientes (nome e empresa) das conversas
usando an√°lise de LLM (Deepseek) com base nas mensagens recebidas.
"""

import sqlite3
import requests
import json
import time
from typing import Dict, List, Optional, Tuple
import re

class ClientInfoExtractor:
    def __init__(self, db_path: str = 'talqui.db'):
        self.db_path = db_path
        
    def get_all_sessions(self) -> List[str]:
        """Obt√©m todas as sess√µes que ainda n√£o t√™m informa√ß√µes de cliente preenchidas"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Buscar apenas sess√µes que n√£o t√™m name e company preenchidos (limitando para teste)
        cursor.execute("""
            SELECT sessionID 
            FROM session_classifications 
            WHERE (name IS NULL OR name = '' OR name = 'N√£o informado') 
            AND (company IS NULL OR company = '' OR company = 'N√£o informado')
            ORDER BY classified_at DESC
            LIMIT 200
        """)
        
        sessions = [row[0] for row in cursor.fetchall()]
        conn.close()
        
        print(f"Encontradas {len(sessions)} sess√µes para an√°lise")
        return sessions
    
    def get_session_messages(self, session_id: str) -> List[Dict]:
        """Obt√©m todas as mensagens de uma sess√£o, focando nas inbound (cliente)"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT messageDirection, messageValue, message_createdAt
            FROM talqui_unified 
            WHERE sessionID = ? 
            ORDER BY message_createdAt ASC
        """, (session_id,))
        
        messages = []
        for row in cursor.fetchall():
            # Focar apenas nas mensagens inbound (do cliente)
            if row[0] == 'inbound':
                messages.append({
                    'direction': row[0],
                    'content': row[1],
                    'timestamp': row[2]
                })
        
        conn.close()
        return messages
    
    def analyze_with_deepseek(self, client_messages: List[str]) -> Dict:
        """An√°lise usando Deepseek para extrair nome e empresa do cliente"""
        
        # Combinar mensagens do cliente
        combined_messages = "\n".join(client_messages[:10])  # M√°ximo 10 mensagens
        
        # Prompt otimizado para extra√ß√£o de informa√ß√µes do cliente
        prompt = f"""
Analise as mensagens abaixo que foram enviadas por um CLIENTE para um atendimento ao cliente. 
Extraia APENAS informa√ß√µes sobre o CLIENTE (n√£o sobre os agentes de atendimento).

MENSAGENS DO CLIENTE:
{combined_messages}

Tarefa: Identifique o nome da pessoa (cliente) e o nome da empresa do cliente.

Regras importantes:
1. IGNORE qualquer men√ß√£o a agentes, atendentes ou funcion√°rios da empresa que est√° prestando o atendimento
2. Procure apenas por informa√ß√µes sobre o CLIENTE que est√° sendo atendido
3. Nomes de pessoas devem ser nomes pr√≥prios completos (ex: "Jo√£o Silva", "Maria Santos")  
4. Nomes de empresas devem ser raz√µes sociais ou nomes fantasia (ex: "TechCorp Ltda", "Padaria Central")
5. Se n√£o tiver certeza suficiente (>80%), n√£o extraia a informa√ß√£o

Responda APENAS em formato JSON:
{{
    "name": "nome completo da pessoa cliente ou null",
    "company": "nome da empresa do cliente ou null",  
    "confidence_name": 0.0-1.0,
    "confidence_company": 0.0-1.0,
    "reasoning": "breve explica√ß√£o do que foi encontrado"
}}
"""
        
        try:
            # Simulando chamada para Deepseek - substitua pela API real
            # Por enquanto, vou usar uma an√°lise baseada em padr√µes
            result = self.analyze_with_patterns(combined_messages)
            return result
            
        except Exception as e:
            print(f"Erro na an√°lise: {e}")
            return {
                "name": None,
                "company": None, 
                "confidence_name": 0.0,
                "confidence_company": 0.0,
                "reasoning": f"Erro na an√°lise: {str(e)}"
            }
    
    def analyze_with_patterns(self, text: str) -> Dict:
        """An√°lise baseada em padr√µes regex enquanto n√£o temos acesso ao Deepseek"""
        
        # Filtrar mensagens de assistentes virtuais (n√£o s√£o de clientes reais)
        if 'üë©üèΩ‚Äçüíª' in text or 'assistente virtual' in text.lower():
            return {
                "name": None,
                "company": None,
                "confidence_name": 0.0,
                "confidence_company": 0.0,
                "reasoning": "Mensagem de assistente virtual ignorada"
            }
        
        # Padr√µes para identificar nomes de pessoas (ordem por prioridade)
        name_patterns = [
            r'(?:meu nome √©|me chamo|sou (?:a|o))\s+([A-Z√Ä-≈∏][a-z√†-√ø]+(?:\s+[A-Z√Ä-≈∏][a-z√†-√ø]+)*)',  # Nome com contexto expl√≠cito
            r'^([A-Z√Ä-≈∏][a-z√†-√ø]{4,})$',  # Nome sozinho em linha pr√≥pria (m√≠n 5 chars)
        ]
        
        # Padr√µes para identificar empresas (ordem por prioridade)
        company_patterns = [
            r'(?:empresa|companhia|firma)\s+([A-Z][A-Za-z\s\-]{4,})',
            r'(?:da empresa)\s+([A-Z][A-Za-z\s\-]{4,})',
            r'\*([A-Z][A-Z\-]{3,})\*',  # Nomes em asteriscos como *SGPFLOW*
            r'([A-Z][A-Za-z\s\-]+(?:Ltda|LTDA|S\.A\.|SA|ME|EPP|Corp|Inc))',
            r'^([A-Z][a-z]+(?:[A-Z][a-z]*){2,})$',  # Palavras compostas em linha pr√≥pria
        ]
        
        name_found = None
        company_found = None
        name_confidence = 0.0
        company_confidence = 0.0
        
        # Buscar nome da pessoa primeiro
        used_text_for_name = None
        for i, pattern in enumerate(name_patterns):
            matches = re.findall(pattern, text, re.IGNORECASE | re.MULTILINE)
            if matches:
                potential_name = matches[0].strip()
                # Verificar se n√£o √© uma palavra comum/gen√©rica
                common_words = ['bom', 'boa', 'dia', 'tarde', 'noite', 'ok', 'sim', 'n√£o', 'obrigada', 'obrigado', 
                               'mas', 'uma', 'sou', 'dias', 'pouco', 'breve', 'boleto', 'antes', 'gostaria',
                               'enorme', 'estou', 'configurar', 'precisando', 'ordem', 'gerente', 'supervisora',
                               'empresa', 'companhia', 'firma']
                if potential_name.lower() not in common_words and len(potential_name) >= 4:
                    name_found = potential_name.title()
                    used_text_for_name = potential_name.lower()
                    # Confian√ßa baseada no tipo de padr√£o
                    if i == 0:  # Padr√£o "meu nome √©..."
                        name_confidence = 0.95
                    else:  # Nome sozinho
                        name_confidence = 0.85
                    break
        
        # Buscar nome da empresa (evitando texto j√° usado para nome)
        for i, pattern in enumerate(company_patterns):
            matches = re.findall(pattern, text, re.IGNORECASE | re.MULTILINE)
            if matches:
                potential_company = matches[0].strip()
                # Verificar se n√£o √© o mesmo texto usado para nome
                if used_text_for_name and potential_company.lower() == used_text_for_name:
                    continue
                    
                # Verificar se n√£o √© uma palavra muito gen√©rica
                invalid_companies = ['assistente', 'virtual', 'startup', 'mensagem', 'dor', 'nome', 'meu']
                if (len(potential_company) >= 4 and 
                    potential_company.lower() not in invalid_companies and
                    not any(word in potential_company.lower() for word in invalid_companies)):
                    # Limpar e formatar
                    potential_company = potential_company.replace('*', '').strip()
                    company_found = potential_company
                    # Confian√ßa baseada no tipo de padr√£o
                    if i < 2:  # Padr√µes com contexto expl√≠cito de empresa
                        company_confidence = 0.90
                    elif i == 2:  # Padr√£o com asteriscos
                        company_confidence = 0.85
                    else:
                        company_confidence = 0.75
                    break
        
        return {
            "name": name_found,
            "company": company_found,
            "confidence_name": name_confidence,
            "confidence_company": company_confidence,
            "reasoning": f"An√°lise por padr√µes. Nome: {'encontrado' if name_found else 'n√£o encontrado'}, Empresa: {'encontrada' if company_found else 'n√£o encontrada'}"
        }
    
    def update_client_info(self, session_id: str, name: str, company: str) -> bool:
        """Atualiza as informa√ß√µes do cliente no banco de dados"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                UPDATE session_classifications 
                SET name = ?, company = ?
                WHERE sessionID = ?
            """, (name or '', company or '', session_id))
            
            updated = cursor.rowcount > 0
            conn.commit()
            conn.close()
            
            return updated
        except Exception as e:
            print(f"Erro ao atualizar sess√£o {session_id}: {e}")
            return False
    
    def process_all_sessions(self):
        """Processa todas as sess√µes para extrair informa√ß√µes de clientes"""
        sessions = self.get_all_sessions()
        
        processed = 0
        updated = 0
        
        print("Iniciando an√°lise de sess√µes...")
        
        for i, session_id in enumerate(sessions):
            print(f"\nProcessando sess√£o {i+1}/{len(sessions)}: {session_id[:8]}...")
            
            # Obter mensagens do cliente
            messages = self.get_session_messages(session_id)
            
            if not messages:
                print("  - Nenhuma mensagem do cliente encontrada")
                continue
            
            # Extrair conte√∫do das mensagens
            client_messages = [msg['content'] for msg in messages if msg['content'].strip()]
            
            if not client_messages:
                print("  - Mensagens vazias")
                continue
            
            # Analisar com IA
            result = self.analyze_with_deepseek(client_messages)
            
            # Verificar confian√ßa e atualizar se necess√°rio
            should_update_name = (result['confidence_name'] > 0.8 and result['name'])
            should_update_company = (result['confidence_company'] > 0.8 and result['company'])
            
            if should_update_name or should_update_company:
                name = result['name'] if should_update_name else None
                company = result['company'] if should_update_company else None
                
                if self.update_client_info(session_id, name, company):
                    updated += 1
                    print(f"  ‚úÖ Atualizado - Nome: {name}, Empresa: {company}")
                    print(f"     Confian√ßa - Nome: {result['confidence_name']:.1%}, Empresa: {result['confidence_company']:.1%}")
                else:
                    print(f"  ‚ùå Erro na atualiza√ß√£o")
            else:
                print(f"  - Confian√ßa baixa - Nome: {result['confidence_name']:.1%}, Empresa: {result['confidence_company']:.1%}")
            
            processed += 1
            
            # Pequena pausa para n√£o sobrecarregar
            time.sleep(0.1)
        
        print(f"\n{'='*50}")
        print(f"An√°lise conclu√≠da!")
        print(f"Sess√µes processadas: {processed}")
        print(f"Sess√µes atualizadas: {updated}")
        print(f"{'='*50}")

def main():
    print("üîç EXTRA√á√ÉO DE INFORMA√á√ïES DE CLIENTES")
    print("="*50)
    
    extractor = ClientInfoExtractor()
    extractor.process_all_sessions()

if __name__ == "__main__":
    main()