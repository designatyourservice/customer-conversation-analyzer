#!/usr/bin/env python3
"""
Script para identificar o agente respons√°vel por cada sess√£o
Analisa mensagens outbound para identificar quem atendeu cada sess√£o
"""

import sqlite3
import re
from datetime import datetime
from typing import Optional, Dict, List

class AgentIdentifier:
    def __init__(self, db_path: str = 'talqui.db'):
        self.db_path = db_path
        
        # Padr√µes para identifica√ß√£o de agentes
        self.agent_patterns = {
            'Isabella': [
                r'(?i)isabella',
                r'(?i)sou a isabella',
                r'(?i)eu sou a isabella'
            ],
            'Alison': [
                r'(?i)alison',
                r'(?i)sou o alison',
                r'(?i)\*alison\*',
                r'(?i)alisson'  # Varia√ß√£o encontrada
            ],
            'Thomaz': [
                r'(?i)thomaz',
                r'(?i)sou o thomaz',
                r'(?i)sou thomaz',
                r'(?i)\*tom\*'  # Assinatura abreviada
            ],
            'Achilles': [
                r'(?i)achilles',
                r'(?i)aquiles',
                r'(?i)meu nome √© achilles',
                r'(?i)nome √© achilles',
                r'(?i)\*achilles\*',
                r'(?i)achilles mello'
            ],
            'Gustavo': [
                r'(?i)gustavo',
                r'(?i)sou o gustavo',
                r'(?i)\*gustavo\*'
            ],
            'Jo√£o': [
                r'(?i)jo√£o miranda',
                r'(?i)joao miranda',
                r'(?i)meu nome √© jo√£o',
                r'(?i)sou o jo√£o',
                r'(?i)\*jo√£o miranda\*'
            ],
            'Ana': [
                r'(?i)sou a ana',
                r'(?i)meu nome √© ana'
            ],
            'Paulo': [
                r'(?i)sou o paulo',
                r'(?i)meu nome √© paulo'
            ],
            'Carlos': [
                r'(?i)sou o carlos',
                r'(?i)meu nome √© carlos'
            ],
            'Rafael': [
                r'(?i)sou o rafael',
                r'(?i)meu nome √© rafael'
            ],
            'Lucas': [
                r'(?i)sou o lucas',
                r'(?i)meu nome √© lucas'
            ],
            'Gabriel': [
                r'(?i)sou o gabriel',
                r'(?i)meu nome √© gabriel'
            ]
        }
    
    def identify_agent_from_message(self, message: str) -> Optional[str]:
        """Identifica agente baseado no conte√∫do da mensagem"""
        if not message:
            return None
            
        # Verificar cada padr√£o de agente
        for agent_name, patterns in self.agent_patterns.items():
            for pattern in patterns:
                if re.search(pattern, message):
                    return agent_name
        
        return None
    
    def identify_agent_from_operator_info(self, operator_info: str) -> Optional[str]:
        """Identifica agente baseado no campo operator_info"""
        if not operator_info:
            return None
            
        # Verificar se operator_info cont√©m nome do agente diretamente
        for agent_name in self.agent_patterns.keys():
            if agent_name.lower() in operator_info.lower():
                return agent_name
                
        return None
    
    def get_session_messages(self, session_id: str) -> List[Dict]:
        """Busca todas as mensagens de uma sess√£o"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT messageDirection, messageValue, operator_info, message_createdAt
            FROM talqui_unified 
            WHERE sessionID = ? 
            ORDER BY message_createdAt ASC
        """, (session_id,))
        
        messages = []
        for row in cursor.fetchall():
            messages.append({
                'direction': row[0],
                'content': row[1],
                'operator_info': row[2],
                'created_at': row[3]
            })
        
        conn.close()
        return messages
    
    def identify_session_agent(self, session_id: str) -> Optional[str]:
        """Identifica o agente respons√°vel por uma sess√£o espec√≠fica"""
        messages = self.get_session_messages(session_id)
        
        if not messages:
            return None
        
        # Estrat√©gia 1: Verificar operator_info primeiro
        for message in messages:
            if message['direction'] == 'outbound' and message['operator_info']:
                agent = self.identify_agent_from_operator_info(message['operator_info'])
                if agent:
                    return agent
        
        # Estrat√©gia 2: Analisar conte√∫do das mensagens outbound
        for message in messages:
            if message['direction'] == 'outbound' and message['content']:
                agent = self.identify_agent_from_message(message['content'])
                if agent:
                    return agent
        
        # Estrat√©gia 3: Verificar se √© mensagem autom√°tica/sistema
        outbound_messages = [m for m in messages if m['direction'] == 'outbound']
        if outbound_messages:
            # Se h√° mensagens outbound mas n√£o identificamos agente, pode ser sistema
            first_outbound = outbound_messages[0]['content'] if outbound_messages[0]['content'] else ''
            
            # Padr√µes de mensagens autom√°ticas
            auto_patterns = [
                r'lembrete.*pagamento',
                r'fatura.*vencimento',
                r'boleto.*cobran√ßa',
                r'segunda.*via',
                r'aten√ß√£o.*boleto'
            ]
            
            for pattern in auto_patterns:
                if re.search(pattern, first_outbound, re.IGNORECASE):
                    return 'Sistema'
        
        return None
    
    def add_agent_column(self):
        """Adiciona coluna agent na tabela session_classifications"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute("ALTER TABLE session_classifications ADD COLUMN agent TEXT")
            conn.commit()
            print("‚úÖ Coluna 'agent' adicionada √† tabela session_classifications")
        except sqlite3.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ö†Ô∏è  Coluna 'agent' j√° existe")
            else:
                raise e
        
        conn.close()
    
    def process_all_sessions(self, batch_size: int = 100):
        """Processa todas as sess√µes para identificar agentes"""
        
        print("üîç INICIANDO IDENTIFICA√á√ÉO DE AGENTES POR SESS√ÉO")
        print("=" * 50)
        
        # Adicionar coluna se n√£o existir
        self.add_agent_column()
        
        # Buscar todas as sess√µes classificadas
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT sessionID FROM session_classifications ORDER BY sessionID")
        all_sessions = [row[0] for row in cursor.fetchall()]
        total_sessions = len(all_sessions)
        
        print(f"üìä Total de sess√µes a processar: {total_sessions:,}")
        
        # Contadores
        identified_count = 0
        not_identified_count = 0
        agent_counts = {}
        
        # Processar em lotes
        for i in range(0, total_sessions, batch_size):
            batch = all_sessions[i:i + batch_size]
            batch_results = []
            
            print(f"üîÑ Processando lote {i//batch_size + 1}: sess√µes {i+1}-{min(i+batch_size, total_sessions)}")
            
            for session_id in batch:
                agent = self.identify_session_agent(session_id)
                
                if agent:
                    identified_count += 1
                    agent_counts[agent] = agent_counts.get(agent, 0) + 1
                else:
                    agent = 'N√£o identificado'
                    not_identified_count += 1
                
                batch_results.append((agent, session_id))
            
            # Atualizar banco em lote
            cursor.executemany("""
                UPDATE session_classifications 
                SET agent = ? 
                WHERE sessionID = ?
            """, batch_results)
            
            conn.commit()
            
            if (i // batch_size + 1) % 10 == 0:
                print(f"  ‚úÖ Processados: {min(i+batch_size, total_sessions):,}/{total_sessions:,}")
        
        conn.close()
        
        # Relat√≥rio final
        print(f"\nüéâ IDENTIFICA√á√ÉO CONCLU√çDA!")
        print(f"‚úÖ Identificados: {identified_count:,} ({identified_count/total_sessions*100:.1f}%)")
        print(f"‚ùå N√£o identificados: {not_identified_count:,} ({not_identified_count/total_sessions*100:.1f}%)")
        
        print(f"\nüìä DISTRIBUI√á√ÉO POR AGENTE:")
        for agent, count in sorted(agent_counts.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total_sessions) * 100
            print(f"  {agent:15} | {count:4,} sess√µes ({percentage:5.1f}%)")
        
        return {
            'total_sessions': total_sessions,
            'identified': identified_count,
            'not_identified': not_identified_count,
            'agent_distribution': agent_counts
        }
    
    def export_with_agents(self, filename: str = 'FINAL_ALL_CLASSIFICATIONS_WITH_AGENTS.csv'):
        """Exporta CSV incluindo informa√ß√£o do agente"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT sessionID, category, subcategory, confidence, reasoning, 
                   classified_at, messages_analyzed, summary, agent
            FROM session_classifications 
            ORDER BY category, subcategory, agent
        """)
        
        import csv
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            
            # Header
            writer.writerow(['sessionID', 'category', 'subcategory', 'confidence', 
                           'reasoning', 'classified_at', 'messages_analyzed', 'summary', 'agent'])
            
            # Data
            for row in cursor.fetchall():
                writer.writerow(row)
        
        conn.close()
        
        print(f"üìÑ Arquivo exportado: {filename}")
        
        # Mostrar estat√≠sticas do arquivo
        with open(filename, 'r') as f:
            total_lines = sum(1 for line in f) - 1
        
        print(f"üìä Total de registros exportados: {total_lines:,}")
        
        return filename
    
    def generate_agent_analysis_report(self):
        """Gera relat√≥rio de an√°lise por agente"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        print(f"\nüìà AN√ÅLISE DETALHADA POR AGENTE:")
        print("=" * 60)
        
        # An√°lise por agente e categoria
        cursor.execute("""
            SELECT agent, category, COUNT(*) as sessions_count
            FROM session_classifications 
            WHERE agent IS NOT NULL
            GROUP BY agent, category
            ORDER BY agent, sessions_count DESC
        """)
        
        current_agent = None
        agent_totals = {}
        
        for agent, category, count in cursor.fetchall():
            if agent != current_agent:
                if current_agent:
                    print(f"  Total: {agent_totals[current_agent]:,} sess√µes\n")
                
                current_agent = agent
                agent_totals[agent] = 0
                print(f"üë§ {agent.upper()}:")
            
            agent_totals[agent] += count
            percentage = (count / agent_totals.get(agent, 1)) * 100 if agent in agent_totals else 0
            print(f"  {category:15} | {count:4,} sess√µes")
        
        # √öltimo agente
        if current_agent:
            print(f"  Total: {agent_totals[current_agent]:,} sess√µes")
        
        conn.close()

def main():
    """Fun√ß√£o principal"""
    print("ü§ñ IDENTIFICADOR DE AGENTES POR SESS√ÉO")
    print("Analisando todas as sess√µes para identificar o agente respons√°vel...")
    print()
    
    identifier = AgentIdentifier()
    
    # Executar identifica√ß√£o
    results = identifier.process_all_sessions(batch_size=100)
    
    # Gerar relat√≥rio detalhado
    identifier.generate_agent_analysis_report()
    
    # Exportar dados com agentes
    csv_file = identifier.export_with_agents()
    
    print(f"\n‚úÖ PROCESSO CONCLU√çDO!")
    print(f"üìÑ Arquivo exportado: {csv_file}")
    
    return results

if __name__ == "__main__":
    main()