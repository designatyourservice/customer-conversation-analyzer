#!/usr/bin/env python3
"""
Classifica√ß√£o massiva otimizada - lotes maiores para todas as sess√µes
"""

from session_classifier import SessionClassifier
import time
from datetime import datetime

def run_massive_classification():
    """Executa classifica√ß√£o em lotes grandes at√© completar todas as sess√µes"""
    
    classifier = SessionClassifier()
    
    print("üöÄ CLASSIFICA√á√ÉO MASSIVA INICIADA")
    print("=" * 60)
    
    total_processed = 0
    batch_num = 1
    start_time = datetime.now()
    
    # Loop at√© n√£o haver mais sess√µes
    while True:
        print(f"\nüì¶ LOTE {batch_num} - {datetime.now().strftime('%H:%M:%S')}")
        
        # Classificar lote de 100 sess√µes
        batch_size = 100
        classified = 0
        errors = 0
        
        sessions = classifier.get_sessions_to_classify(batch_size)
        
        if not sessions:
            print("‚úÖ N√£o h√° mais sess√µes para classificar!")
            break
        
        print(f"üìã Processando {len(sessions)} sess√µes...")
        
        for i, session in enumerate(sessions, 1):
            try:
                messages = classifier.get_session_messages(session['sessionID'])
                
                if messages:
                    classification = classifier.classify_session_with_deepseek(messages, session)
                    
                    if classification:
                        classifier.save_classification(
                            session['sessionID'], 
                            classification, 
                            len(messages)
                        )
                        classified += 1
                        
                        # Progresso a cada 10 sess√µes
                        if i % 10 == 0:
                            print(f"  ‚úÖ {i}/{len(sessions)} - {classification['category'][:15]} (conf: {classification.get('confidence', 0):.2f})")
                    else:
                        errors += 1
                else:
                    errors += 1
                
                # Pausa m√≠nima para n√£o sobrecarregar API
                time.sleep(0.3)
                
            except Exception as e:
                errors += 1
                print(f"  ‚ùå Erro: {str(e)[:50]}...")
        
        total_processed += classified
        
        # Estat√≠sticas do lote
        elapsed = datetime.now() - start_time
        rate = total_processed / elapsed.total_seconds() * 60
        
        print(f"\nüìä LOTE {batch_num} CONCLU√çDO:")
        print(f"  ‚úÖ Classificadas: {classified}")
        print(f"  ‚ùå Erros: {errors}")
        print(f"  üìà Total processado: {total_processed}")
        print(f"  ‚ö° Taxa: {rate:.1f} sess√µes/min")
        print(f"  ‚è±Ô∏è  Tempo decorrido: {elapsed}")
        
        # Backup a cada 500 classifica√ß√µes
        if total_processed % 500 == 0:
            try:
                classifier.export_classifications_to_csv(f"backup_{total_processed}_sessions.csv")
                print(f"üíæ Backup salvo: backup_{total_processed}_sessions.csv")
            except:
                pass
        
        batch_num += 1
        
        # Pausa entre lotes
        print("‚è∏Ô∏è  Pausando 2 segundos...")
        time.sleep(2)
    
    # Estat√≠sticas finais
    elapsed = datetime.now() - start_time
    
    print(f"\nüéâ CLASSIFICA√á√ÉO MASSIVA CONCLU√çDA!")
    print("=" * 60)
    print(f"üìä Total classificado: {total_processed:,} sess√µes")
    print(f"‚è±Ô∏è  Tempo total: {elapsed}")
    print(f"‚ö° Taxa m√©dia: {total_processed/elapsed.total_seconds()*60:.1f} sess√µes/min")
    
    # Custo estimado
    cost = total_processed * 0.00009
    print(f"üí∞ Custo estimado: ${cost:.4f} USD")
    
    # Obter estat√≠sticas finais
    stats = classifier.get_classification_stats()
    print(f"\nüìà RESUMO FINAL:")
    print(f"  Total no banco: {stats['total_classified']:,}")
    
    if stats['categories']:
        print(f"  üìä Distribui√ß√£o:")
        for category, count in sorted(stats['categories'].items(), key=lambda x: x[1], reverse=True):
            percentage = count / stats['total_classified'] * 100
            print(f"    {category}: {count:,} ({percentage:.1f}%)")
    
    # Exportar resultado final
    classifier.export_classifications_to_csv("FINAL_ALL_CLASSIFICATIONS.csv")
    print(f"\nüìÑ Arquivo final: FINAL_ALL_CLASSIFICATIONS.csv")
    
    classifier.close()

if __name__ == "__main__":
    try:
        run_massive_classification()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")