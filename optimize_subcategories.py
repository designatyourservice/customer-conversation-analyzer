#!/usr/bin/env python3
"""
Script otimizado para reduzir subcategorias para m√°ximo 10 por categoria
Processa sem usar API externa para ser mais r√°pido
"""

import sqlite3
from datetime import datetime
from collections import Counter

class SubcategoryOptimizer:
    def __init__(self):
        self.db_path = 'talqui.db'
        
    def analyze_and_optimize(self):
        """Analisa e otimiza subcategorias automaticamente"""
        
        print("üöÄ OTIMIZADOR DE SUBCATEGORIAS")
        print("=" * 50)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Backup
        backup_name = f"session_classifications_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        cursor.execute(f"CREATE TABLE {backup_name} AS SELECT * FROM session_classifications")
        print(f"‚úÖ Backup criado: {backup_name}")
        
        # Adicionar coluna summary se n√£o existir
        try:
            cursor.execute("ALTER TABLE session_classifications ADD COLUMN summary TEXT")
            cursor.execute("UPDATE session_classifications SET summary = subcategory WHERE summary IS NULL")
            print("‚úÖ Coluna 'summary' criada e populada")
        except sqlite3.OperationalError:
            print("‚ö†Ô∏è  Coluna 'summary' j√° existe")
        
        categories = ['COMERCIAL', 'SUPORTE_TECNICO', 'FINANCEIRO', 'INFORMACAO', 'RECLAMACAO', 'CANCELAMENTO', 'OUTROS']
        
        total_optimized = 0
        
        for category in categories:
            print(f"\nüîÑ Processando: {category}")
            
            # Buscar todas as subcategorias da categoria
            cursor.execute("""
                SELECT subcategory, COUNT(*) as count 
                FROM session_classifications 
                WHERE category = ? 
                GROUP BY subcategory 
                ORDER BY count DESC
            """, (category,))
            
            subcats = cursor.fetchall()
            
            if len(subcats) <= 10:
                print(f"  ‚úÖ J√° otimizada ({len(subcats)} subcategorias)")
                continue
                
            # Top 9 subcategorias (reservamos 1 spot para "outros")
            top_9 = [sub[0] for sub in subcats[:9]]
            
            print(f"  üìä {len(subcats)} ‚Üí 10 subcategorias")
            print(f"  üèÜ Top 9 mantidas:")
            
            for i, (subcat, count) in enumerate(subcats[:9], 1):
                print(f"    {i}. {subcat[:50]}... ({count})")
            
            # Reclassificar todas as outras para "outros"
            others_count = 0
            for subcat, count in subcats[9:]:
                cursor.execute("""
                    UPDATE session_classifications 
                    SET subcategory = 'outros' 
                    WHERE category = ? AND subcategory = ?
                """, (category, subcat))
                
                others_count += count
                total_optimized += count
            
            print(f"  üîÑ {len(subcats) - 9} subcategorias ‚Üí 'outros' ({others_count} sess√µes)")
        
        conn.commit()
        conn.close()
        
        print(f"\nüéâ OTIMIZA√á√ÉO CONCLU√çDA!")
        print(f"üìä Total de sess√µes reclassificadas: {total_optimized:,}")
        print(f"üíæ Backup salvo: {backup_name}")
        
        # Mostrar estat√≠sticas finais
        self.show_final_stats()
    
    def show_final_stats(self):
        """Mostra estat√≠sticas finais"""
        
        print(f"\nüìà ESTAT√çSTICAS FINAIS:")
        print("=" * 50)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT category, 
                   COUNT(DISTINCT subcategory) as subcats_count,
                   COUNT(*) as sessions_count
            FROM session_classifications 
            GROUP BY category 
            ORDER BY subcats_count DESC
        """)
        
        for category, subcats, sessions in cursor.fetchall():
            status = "‚úÖ" if subcats <= 10 else "‚ö†Ô∏è"
            print(f"{status} {category:15} | {subcats:2d} subcategorias | {sessions:4d} sess√µes")
        
        # Mostrar distribui√ß√£o de "outros"
        print(f"\nüìã DISTRIBUI√á√ÉO DE 'OUTROS':")
        cursor.execute("""
            SELECT category, COUNT(*) as count
            FROM session_classifications 
            WHERE subcategory = 'outros'
            GROUP BY category 
            ORDER BY count DESC
        """)
        
        for category, count in cursor.fetchall():
            cursor.execute("SELECT COUNT(*) FROM session_classifications WHERE category = ?", (category,))
            total = cursor.fetchone()[0]
            percentage = (count / total) * 100
            print(f"  {category:15} | {count:3d} sess√µes ({percentage:4.1f}%)")
        
        conn.close()

def main():
    optimizer = SubcategoryOptimizer()
    optimizer.analyze_and_optimize()

if __name__ == "__main__":
    main()